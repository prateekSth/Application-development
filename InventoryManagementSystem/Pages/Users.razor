@page "/users"
<div class="row my-5 top_user">
	<div class="col-6">
		<h2 class="fw-bold text-primary">Users Information</h2>
	</div>
	<div class="col-6 text-end">
		<button class="btn btn-primary border-2" type="button" @onclick="Open_Add_DialogBox">
			<span class="oi mdi:user-box" /> &nbsp; Add User
		</button>
	</div>
</div>

<table class="table ">
	<thead>
		<tr class="table-primary">
			<th>User Name </th>
			<th>Email Address</th>
			<th>Position</th>
			<th>Created By</th>
			<th>Created Date</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var user in users)
		{
			<tr>
				<td>@user.Username</td>
				<td>@user.Email</td>
				<td>@user.Role.ToString()</td>
				<td>
					@{
						var person = UserService.Get_By_Id(user.CreatedBy);
						<span>@(person == null ? "Admin" : person.Username)</span>
					}
				</td>
				<td>@user.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
				<td>
					<button disabled="@(_globalState.CurrentUser != null ? _globalState.CurrentUser.Id == user.Id : false)"
						class="btn btn-danger" type="button" @onclick="()=>Open_Delete_DialogBox(user)">
						<span  /> &nbsp; Delete
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

@if (_showAddUserDialog)
{
	<ModalDialog Title="Add New User" OnClose="@OnAdd_User_DialogClose" OkLabel="Add">
		<form>
			<div class="mb-2">
				<label for="text" class="form-label">&nbsp;Username</label>
				<input type="text" class="form-control" @bind="_username" placeholder="Enter your username">
			</div>
			<div class="mb-2">
				<label for="text" class="form-label">&nbsp;Email Address</label>
				<input type="text" class="form-control" @bind="_email" placeholder="Enter your email address">
			</div>
			<div class=" row ">
				<div class="mb-2 col-6">
					<label for="text" class="form-label">&nbsp;Password</label>
					<input type="password" class="form-control" @bind="_password" placeholder="Enter your password">
				</div>
				<div class="mb-2 col-6">
					<label for="text" class="form-label">Choose Position</label>
					<div class="row">
						<div class="form-chek col-6">
							<input id="adminRole" type="radio" class="form-check-input" name="role" value="@Role.Admin" @onchange="RoleChangeHandler" checked="@(_role == Role.Admin)">
							<label class="form-check-label" for="adminRole">@Role.Admin</label>
						</div>
						<div class="form-check mb-2 col-6">
							<label class="form-check-label" for="userRole">@Role.Staff</label>
							<input id="userRole" type="radio" class="form-check-input" name="role" value="@Role.Staff" @onchange="RoleChangeHandler" checked="@(_role == Role.Staff)">
						</div>
					</div>
				</div>
			</div>
			@if (!string.IsNullOrEmpty(_addUserErrorMessage))
			{
				<AlertMessage Type="danger" Message="@_addUserErrorMessage" />
			}
		</form>
	</ModalDialog>
}

@if (_showDeleteUserDialog)
{
	<ModalDialog Title="Delete User" OnClose="@OnDelete_User_DialogClose" OkLabel="Confirm">

		<p>Do you want to delete  <strong>@_deleteUser.Username</strong> user.</p>

		@if (!string.IsNullOrEmpty(_deleteUserErrorMessage))
		{
			<AlertMessage Type="danger" Message="@_deleteUserErrorMessage" />
		}
	</ModalDialog>
}

@code {
	[CascadingParameter]
	private State _globalState { get; set; }

	private List<User> users { get; set; }

	private bool _showAddUserDialog { get; set; }

	private bool _showDeleteUserDialog { get; set; }

	private string _addUserErrorMessage { get; set; }

	private string _deleteUserErrorMessage { get; set; }

	private User _deleteUser { get; set; }

	private string _username { get; set; }

	private string _email { get; set; }

	private string _password { get; set; }

	private Role _role { get; set; }

	protected override void OnInitialized()
	{
		users = UserService.Get_All_Users();
	}

	private void Open_Add_DialogBox()
	{
		_showAddUserDialog = true;
		_username = "";
		_email = "";
		_password = "";
		_role = Role.Staff;
	}

	private void OnAdd_User_DialogClose(bool isCancel)
	{
		if (isCancel)
		{
			_showAddUserDialog = false;
		}
		else
		{
			try
			{
				_addUserErrorMessage = "";
				users = UserService.Create(_globalState.CurrentUser.Id, _username, _email, _password, _role);
				_showAddUserDialog = false;
			}
			catch (Exception e)
			{
				_addUserErrorMessage = e.Message;
			}
		}
	}

	private void RoleChangeHandler(ChangeEventArgs e)
	{
		_role = (Role)Enum.Parse(typeof(Role), e.Value.ToString());
	}

	private void Open_Delete_DialogBox(User user)
	{
		_deleteUser = user;
		_showDeleteUserDialog = true;
	}

	private void OnDelete_User_DialogClose(bool isCancel)
	{
		if (isCancel)
		{

			_showDeleteUserDialog = false;
			_deleteUser = null;
		}
		else
		{
			try
			{
				_deleteUserErrorMessage = "";
				users = UserService.Delete(_deleteUser.Id);
				_showDeleteUserDialog = false;
				_deleteUser = null;
			}
			catch (Exception e)
			{
				_deleteUserErrorMessage = e.Message;
			}
		}
	}
}
